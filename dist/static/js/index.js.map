{"version":3,"file":"static/js/index.js","sources":["./src/App.jsx","./src/Board.jsx","./src/index.jsx"],"sourcesContent":["import React from 'react';\nimport Board from './Board.jsx';\nimport './AppStyles.css';\n\nfunction App() {\n  return (\n\t\t<div className='flexbox-container'>\n\t\t\t<h1>Kat's Tic-Tac-Toe Game</h1>\n\t\t\t<Board />\n\t\t</div>\n  );\n}\n\nexport default App;","// Board.jsx\nimport React, { useState } from 'react';\nimport './AppStyles.css';\n\nconst Square = ({ value, onSquareClick }) => {\n  return (\n    <button\n      className='square'\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n};\n\nconst Board = () => {\n  const initialSquares = Array(9).fill(null);\n  const [squares, setSquares] = useState(initialSquares);\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = computeWinner(squares);\n  const [count, setCount] = useState(0);\n\n  const handleClick = (i) => {\n    if (winner || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    setCount(count => count + 1);\n  }\n\n  const handlePlayAgain = () => {\n    setSquares(initialSquares);\n    setXIsNext(true);\n    setCount(0);\n  }\n\n  let status;\n  if (winner) {\n    status = winner + ' wins!';\n  } else if (count === 9) {\n    status = 'Draw!';\n  } else {\n    status = (xIsNext ? 'X' : 'O') + '\\'s turn';\n  }\n\n  return (\n    <div className='board'>\n      <div className='status'>{status}</div>\n      {Array(3).fill(null).map((_, row) => (\n        <div key={row} className='board-row'>\n          {Array(3).fill(null).map((_, col) => {\n            const index = row * 3 + col;\n            return (\n              <Square\n                key={index}\n                value={squares[index]}\n                onSquareClick={() => handleClick(index)}\n              />\n            );\n          })}\n        </div>\n      ))}\n      {winner && (\n        <button onClick={handlePlayAgain} className='play-again'>\n          Play Again\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst computeWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Board from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Board />\n  </React.StrictMode>,\n);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAAA;;;;;;AACA;;;;;;;;;;;AAGA;AAPA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;;AACA;AAAA;;;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;;;;;;AAGA;AATA;AAWA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AACA;;AACA;AAAA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;;;;;AAKA;AAVA;;;;;AAaA;AACA;AAAA;AAAA;;;;;;;;;;;;AAMA;AA7DA;AAAA;AA+DA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AAEA;AACA;AAEA"}