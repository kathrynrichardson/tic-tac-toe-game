(self['webpackChunkrsbuild_react_js'] = self['webpackChunkrsbuild_react_js'] || []).push([["vendors~node_modules_rsbuild_core_dist_client_hmr_js_path_rsbuild-hmr_port_8080~node_modules_~d15239"], {
"./node_modules/@rsbuild/core/dist/client/hmr.js?&path=/rsbuild-hmr&port=8080": (function (module, exports, __webpack_require__) {
"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = function(cb, mod) {
    return function __require() {
        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
            exports: {}
        }).exports, mod), mod.exports;
    };
};
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) _iterator.return();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
// ../shared/dist/formatStats.js
var require_formatStats = __commonJS({
    "../shared/dist/formatStats.js": function(exports2, module2) {
        "use strict";
        var __defProp2 = Object.defineProperty;
        var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames2 = Object.getOwnPropertyNames;
        var __hasOwnProp2 = Object.prototype.hasOwnProperty;
        var __export = function(target, all) {
            for(var name in all)__defProp2(target, name, {
                get: all[name],
                enumerable: true
            });
        };
        var __copyProps2 = function(to, from, except, desc) {
            if (from && typeof from === "object" || typeof from === "function") {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var key = _step.value;
                        if (!__hasOwnProp2.call(to, key) && key !== except) __defProp2(to, key, {
                            get: function() {
                                return from[key];
                            },
                            enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable
                        });
                    };
                    for(var _iterator = __getOwnPropNames2(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) _iterator.return();
                    } finally{
                        if (_didIteratorError) throw _iteratorError;
                    }
                }
            }
            return to;
        };
        var __toCommonJS = function(mod) {
            return __copyProps2(__defProp2({}, "__esModule", {
                value: true
            }), mod);
        };
        var formatStats_exports = {};
        __export(formatStats_exports, {
            formatStatsMessages: function() {
                return formatStatsMessages2;
            }
        });
        module2.exports = __toCommonJS(formatStats_exports);
        var friendlySyntaxErrorLabel = "SyntaxError:";
        function isLikelyASyntaxError(message) {
            return message.includes(friendlySyntaxErrorLabel);
        }
        function formatMessage(stats) {
            var lines = [];
            var message;
            if (typeof stats === "object") {
                var fileName = stats.moduleName ? "File: ".concat(stats.moduleName, "\n") : "";
                var mainMessage = typeof stats.formatted === "string" ? stats.formatted : stats.message;
                var details = stats.details ? "\nDetails: ".concat(stats.details, "\n") : "";
                var stack = stats.stack ? "\n".concat(stats.stack) : "";
                message = "".concat(fileName).concat(mainMessage).concat(details).concat(stack);
            } else message = stats;
            lines = message.split("\n");
            lines = lines.map(function(line) {
                var parsingError = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(line);
                if (!parsingError) return line;
                var _parsingError = _sliced_to_array(parsingError, 4), errorLine = _parsingError[1], errorColumn = _parsingError[2], errorMessage = _parsingError[3];
                return "".concat(friendlySyntaxErrorLabel, " ").concat(errorMessage, " (").concat(errorLine, ":").concat(errorColumn, ")");
            });
            message = lines.join("\n");
            message = message.replace(/SyntaxError\s+\((\d+):(\d+)\)\s*(.+?)\n/g, "".concat(friendlySyntaxErrorLabel, " $3 ($1:$2)\n"));
            lines = message.split("\n");
            if (lines.length > 2 && lines[1].trim() === "") lines.splice(1, 1);
            lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, "$1");
            if (lines[1] && lines[1].indexOf("Module not found:") !== -1) lines[1] = lines[1].replace("Error: ", "");
            lines = lines.filter(function(line, index, arr) {
                return index === 0 || line.trim() !== "" || line.trim() !== arr[index - 1].trim();
            });
            message = lines.join("\n");
            return message.trim();
        }
        function formatStatsMessages2(json) {
            var _json_errors, _json_warnings, _result_errors;
            var formattedErrors = json === null || json === void 0 ? void 0 : (_json_errors = json.errors) === null || _json_errors === void 0 ? void 0 : _json_errors.map(formatMessage);
            var formattedWarnings = json === null || json === void 0 ? void 0 : (_json_warnings = json.warnings) === null || _json_warnings === void 0 ? void 0 : _json_warnings.map(formatMessage);
            var result = {
                errors: formattedErrors || [],
                warnings: formattedWarnings || [],
                errorTips: []
            };
            if ((_result_errors = result.errors) === null || _result_errors === void 0 ? void 0 : _result_errors.some(isLikelyASyntaxError)) result.errors = result.errors.filter(isLikelyASyntaxError);
            if (result.errors.length > 1) result.errors.length = 1;
            return result;
        }
    }
});
// src/client/hmr/index.ts
var import_format_stats = __toESM(require_formatStats());
// src/client/hmr/createSocketUrl.ts
var HMR_SOCK_PATH = "/rsbuild-hmr";
function createSocketUrl(resourceQuery) {
    var searchParams = resourceQuery.substr(1).split("&");
    var options = {};
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = searchParams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var pair = _step.value;
            var ary = pair.split("=");
            options[ary[0]] = decodeURIComponent(ary[1]);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) _iterator.return();
        } finally{
            if (_didIteratorError) throw _iteratorError;
        }
    }
    var currentLocation = self.location;
    return getSocketUrl(options, currentLocation);
}
function formatURL(param) {
    var port = param.port, protocol = param.protocol, hostname = param.hostname, pathname = param.pathname;
    if (window.URL) {
        var url = new URL("http://localhost");
        url.port = port;
        url.hostname = hostname;
        url.protocol = protocol;
        url.pathname = pathname;
        return url.toString();
    }
    var colon = protocol.indexOf(":") === -1 ? ":" : "";
    return "".concat(protocol).concat(colon, "//").concat(hostname, ":").concat(port).concat(pathname);
}
function getSocketUrl(urlParts, location) {
    var host = urlParts.host, port = urlParts.port, path = urlParts.path, protocol = urlParts.protocol;
    return formatURL({
        protocol: protocol || (location.protocol === "https:" ? "wss" : "ws"),
        hostname: host || location.hostname,
        port: port || location.port,
        pathname: path || HMR_SOCK_PATH
    });
}
// src/client/hmr/index.ts
var hadRuntimeError = false;
var socketUrl = createSocketUrl("?&path=/rsbuild-hmr&port=8080");
var connection = new WebSocket(socketUrl);
connection.onopen = function() {
    if (typeof console !== "undefined" && typeof console.info === "function") console.info("[HMR] connected.");
};
connection.onclose = function() {
    if (typeof console !== "undefined" && typeof console.info === "function") console.info("[HMR] disconnected. Refresh the page if necessary.");
};
var isFirstCompilation = true;
var mostRecentCompilationHash = null;
var hasCompileErrors = false;
function clearOutdatedErrors() {
    if (typeof console !== "undefined" && typeof console.clear === "function") {
        if (hasCompileErrors) console.clear();
    }
}
function handleSuccess() {
    clearOutdatedErrors();
    var isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    if (isHotUpdate) tryApplyUpdates();
}
function handleWarnings(warnings) {
    clearOutdatedErrors();
    var isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    function printWarnings() {
        var formatted = (0, import_format_stats.formatStatsMessages)({
            warnings: warnings,
            errors: []
        });
        if (typeof console !== "undefined" && typeof console.warn === "function") for(var i = 0; i < formatted.warnings.length; i++){
            if (i === 5) {
                console.warn("There were more warnings in other files.\nYou can find a complete log in the terminal.");
                break;
            }
            console.warn(formatted.warnings[i]);
        }
    }
    printWarnings();
    if (isHotUpdate) tryApplyUpdates();
}
function handleErrors(errors) {
    clearOutdatedErrors();
    isFirstCompilation = false;
    hasCompileErrors = true;
    var formatted = (0, import_format_stats.formatStatsMessages)({
        errors: errors,
        warnings: []
    });
    if (typeof console !== "undefined" && typeof console.error === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = formatted.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var error = _step.value;
                console.error(error);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) _iterator.return();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
}
function handleAvailableHash(hash) {
    mostRecentCompilationHash = hash;
}
connection.onmessage = function(e) {
    var message = JSON.parse(e.data);
    switch(message.type){
        case "hash":
            handleAvailableHash(message.data);
            break;
        case "still-ok":
        case "ok":
            handleSuccess();
            break;
        case "content-changed":
            window.location.reload();
            break;
        case "warnings":
            handleWarnings(message.data);
            break;
        case "errors":
            handleErrors(message.data);
            break;
        default:
    }
};
function isUpdateAvailable() {
    return mostRecentCompilationHash !== __webpack_require__.h();
}
function canApplyUpdates() {
    return module.hot.status() === "idle";
}
function tryApplyUpdates() {
    if (!module.hot) {
        window.location.reload();
        return;
    }
    if (!isUpdateAvailable() || !canApplyUpdates()) return;
    function handleApplyUpdates(err, updatedModules) {
        var wantsForcedReload = err || !updatedModules || hadRuntimeError;
        if (wantsForcedReload) {
            window.location.reload();
            return;
        }
        if (isUpdateAvailable()) tryApplyUpdates();
    }
    var result = module.hot.check(/* autoApply */ true, handleApplyUpdates);
    if (result === null || result === void 0 ? void 0 : result.then) result.then(function(updatedModules) {
        handleApplyUpdates(null, updatedModules);
    }, function(err) {
        handleApplyUpdates(err, null);
    });
}
}),
"./node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js": (function (module, exports, __webpack_require__) {
// Thanks https://github.com/pmmmwh/react-refresh-webpack-plugin
const RefreshUtils = __webpack_require__(/*! @pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils */"./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
const RefreshRuntime = __webpack_require__(/*! react-refresh/runtime */"./node_modules/react-refresh/runtime.js");
// Port from https://github.com/pmmmwh/react-refresh-webpack-plugin/blob/main/loader/utils/getRefreshModuleRuntime.js#L29
function refresh(moduleId, webpackHot) {
    const currentExports = RefreshUtils.getModuleExports(moduleId);
    const fn = (exports)=>{
        RefreshUtils.executeRuntime(exports, moduleId, webpackHot);
    };
    if (typeof Promise !== "undefined" && currentExports instanceof Promise) currentExports.then(fn);
    else fn(currentExports);
}
module.exports = {
    refresh,
    register: RefreshRuntime.register,
    createSignatureFunctionForTransform: RefreshRuntime.createSignatureFunctionForTransform
};
}),
"./node_modules/@rspack/plugin-react-refresh/client/reactRefreshEntry.js": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * The following code is modified based on
 * https://github.com/pmmmwh/react-refresh-webpack-plugin/blob/0b960573797bf38926937994c481e4fec9ed8aa6/client/ReactRefreshEntry.js
 *
 * MIT Licensed
 * Author Michael Mok
 * Copyright (c) 2019 Michael Mok
 * https://github.com/pmmmwh/react-refresh-webpack-plugin/blob/0b960573797bf38926937994c481e4fec9ed8aa6/LICENSE
 */ var RefreshRuntime = __webpack_require__(/*! react-refresh/runtime */"./node_modules/react-refresh/runtime.js");
var safeThis = function() {
    // copied from core-js-pure/features/global-this
    "use strict";
    var check = function(it) {
        return it && it.Math == Math && it;
    };
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    // eslint-disable-next-line es/no-global-this -- safe
    return check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    check(typeof self == "object" && self) || check(typeof __webpack_require__.g == "object" && __webpack_require__.g) || // eslint-disable-next-line no-new-func -- fallback
    function() {
        return this;
    }() || this || Function("return this")();
}();
if (typeof safeThis !== "undefined") {
    var $RefreshInjected$ = "__reactRefreshInjected";
    // Only inject the runtime if it hasn't been injected
    if (!safeThis[$RefreshInjected$]) {
        RefreshRuntime.injectIntoGlobalHook(safeThis);
        // Empty implementation to avoid "ReferenceError: variable is not defined" in module which didn't pass builtin:react-refresh-loader
        safeThis.$RefreshSig$ = ()=>(type)=>type;
        safeThis.$RefreshReg$ = ()=>{};
        // Mark the runtime as injected to prevent double-injection
        safeThis[$RefreshInjected$] = true;
    }
}
}),

}]);
//# sourceMappingURL=vendors~node_modules_rsbuild_core_dist_client_hmr_js_path_rsbuild-hmr_port_8080~node_modules_~d15239.js.map